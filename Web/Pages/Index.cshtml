@page
@model IndexModel
@{
    ViewData["Title"] = "Home";
}

<div class="alternate-title">
    <h2>What's new?</h2>
</div>
<div class="content">
    <div class="article-preview">
        <p class="metadata">
            <span class="date">
                May 3, 2018
            </span>
            <span class="by">
                by
            </span>
            <span class="author">
                <a href="about.html">
                    Andrew Fulton
                </a>
            </span>
        </p>
        <h3 class="article-title">
            <a href="article.html">
                Website Launch!
            </a>
        </h3>
        <div class="article-preview-content">
            <p>
                New product: Stack Overflow for Teams lets you direct questions to members of your own team, company, or organization.
                <span class="read-more">
                    <a class="more-link" href="article.html">
                        Read More
                    </a>
                </span>
            </p>
        </div>
    </div>
    <div class="article-preview">
        <p class="metadata">
            <span class="date">
                April 23, 2018
            </span>
            <span class="by">
                by
            </span>
            <span class="author">
                <a href="about.html">
                    Andrew Fulton
                </a>
            </span>
        </p>
        <h3 class="article-title">
            <a href="article.html">
                Strange and Maddening Rules
            </a>
        </h3>
        <div class="article-preview-content">
            <p>
                There’s this popular idea among developers that when you face a problem with code, you should get out a rubber duck and explain,
                to the duck, exactly how your code was supposed to work.
                <span class="read-more">
                    <a class="more-link" href="article.html">
                        Read more
                    </a>
                </span>
            </p>
        </div>
    </div>
    <div class="article-preview">
        <p class="metadata">
            <span class="date">
                April 13, 2018
            </span>
            <span class="by">
                by
            </span>
            <span class="author">
                <a href="about.html">
                    Andrew Fulton
                </a>
            </span>
        </p>
        <h3 class="article-title">
            <a href="article.html">
                A Dusting of Gamification
            </a>
        </h3>
        <div class="article-preview-content">
            <p>
                I had to think for a minute to realize that Stack Overflow has “gamification” too. Not a ton. Maybe a dusting of gamification,
                most of it around reputation.
                <span class="read-more">
                    <a class="more-link" href="article.html">
                        Read more
                    </a>
                </span>
            </p>
        </div>
    </div>
    <div class="article-preview">
        <p class="metadata">
            <span class="date">
                March 24, 2018
            </span>
            <span class="by">
                by
            </span>
            <span class="author">
                <a href="about.html">
                    Andrew Fulton
                </a>
            </span>
        </p>
        <h3 class="article-title">
            <a href="article.html">
                The Artificial Intelligence Age
            </a>
        </h3>
        <div class="article-preview-content">
            <p>
                I want to catch you all up on some stuff but mostly I want to tell the story of Stack Overflow in a not-completely-disorganized
                way.
                <span class="read-more">
                    <a class="more-link" href="article.html">
                        Read more
                    </a>
                </span>
            </p>
        </div>
    </div>
    @foreach (var article in Model.Articles)
    {
        <div class="article-preview">
            <p class="metadata">
                <span class="date">
                    @article.CreationDateTime.ToShortDateString();
                </span>
                <span class="by">
                    by
                </span>
                <span class="author">
                    <a href="about.html">
                        @article.AuthorId
                    </a>
                </span>
            </p>
            <h3 class="article-title">
                <a href="article.html">
                    @article.Title
                </a>
            </h3>
            <div class="article-preview-content">
                <p>
                    @article.Description
                    <span class="read-more">
                        <a class="more-link" asp-page="/Article" asp-route-id="@article.ArticleId">
                            Read more
                        </a>
                    </span>
                </p>
            </div>
        </div>
    }
</div>

<div class="large-space"></div>
<nav class="article-navigation">
    @if (Model.ShowPrevious)
    {
        <div class="previous">
            <a asp-page="/Index" asp-route-CurrentPage="@(Model.CurrentPage - 1)" rel="prev">
                <span class="metadata">← Articles</span>
                <br /> Previous
            </a>
        </div>
    }
    <div class="next">
        <a asp-page="/Index" asp-route-CurrentPage="@(Model.CurrentPage + 1)" rel="next">
            <span class="metadata">Articles →</span>
            <br /> More
        </a>
    </div>
</nav>

<div class="alternate-title">
    <h2>More Articles</h2>
</div>
<p>
    I am working on writing more articles, stay tuned!
</p>
<div class="large-space"></div>
<nav class="article-navigation"></nav>