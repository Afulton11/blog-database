using DatabaseFactory.Data.Contracts;
using Domain.Data.Queries;
using EnsureThat;
using System;
using System.Collections.Generic;
using System.Data;

namespace DataAccess.QueryServices
{
    public class AutoGeneratedQueryService<TQuery, TResult> : DbQueryService<TQuery, TResult>
        where TQuery : IQuery<TResult>
    {
        public Func<IDataReader, TQuery, TResult> readQuery;
        public Func<TQuery, IDictionary<string, object>> createParameters;

        public AutoGeneratedQueryService(
            IDatabase database,
            Func<IDataReader, TQuery, TResult> readQuery,
            Func<TQuery, IDictionary<string, object>> createParameters,
            string procedureName) : base(database)
        {
            EnsureArg.IsNotNull(readQuery, nameof(readQuery));
            EnsureArg.IsNotNull(createParameters, nameof(createParameters));
            EnsureArg.IsNotNullOrWhiteSpace(procedureName, nameof(procedureName));

            this.readQuery = readQuery;
            this.createParameters = createParameters;
            ProcedureName = procedureName;
        }

        protected override TResult ReadQueryResult(IDataReader reader, TQuery query) =>
            readQuery(reader, query);

        protected override IEnumerable<IDataParameter> GetParameters(TQuery query)
        {
            foreach (var entry in createParameters(query))
            {
                yield return Database.CreateParameter(entry.Key, entry.Value);
            }
        }

        protected override string ProcedureName { get; }
    }
}
