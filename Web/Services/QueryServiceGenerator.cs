using DataAccess.QueryServices;
using DataAccess.QueryServices.Readers;
using DatabaseFactory.Data.Contracts;
using Domain.Business;
using Domain.Business.QueryServices;
using Domain.Data.Queries;
using EnsureThat;
using Microsoft.Extensions.Logging;
using SimpleInjector;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Reflection.Emit;

namespace Web.Services
{
    public static class QueryServiceGenerator
    {

        public static void RegisterQueryServices(this Container container)
        {
            EnsureArg.IsNotNull(container, nameof(container));

            var queryAssemblies = new[]
            {
                typeof(IQuery<>).Assembly
            };

            var queryTypes = container.GetTypesToRegister(
                typeof(IQuery<>),
                queryAssemblies);

            foreach (var type in queryTypes)
            {
                var resultInterfaceType = type.GetInterfaces().First();
                Type resultType = resultInterfaceType.GetGenericArguments().First();

                if (resultInterfaceType.GetGenericTypeDefinition() == typeof(IPaginatedQuery<>))
                {
                    resultType = typeof(Paged<>).MakeGenericType(resultType);
                }

                RegisterQueryService(container, type, resultType);
            }
        }

        private static void RegisterQueryService(Container container, Type queryType, Type resultType)
        {
            //logger.LogInformation($"Registering query type: {queryType.ToFriendlyName()}");

            if (resultType.IsPrimitive) return;

            var queryServiceType = typeof(IQueryService<,>).MakeGenericType(queryType, resultType);
            var queryServiceImplType = typeof(AutoGeneratedQueryService<,>).MakeGenericType(queryType, resultType);

            try
            {
                container.RegisterSingleton(queryServiceType, () =>
                    CreateQueryServiceInstance(
                        container,
                        queryType,
                        resultType,
                        queryServiceImplType));

            }
            catch
            {
                Console.WriteLine($"{queryType.ToFriendlyName()} should have its own custom service!");
            }
        }

        private static dynamic CreateQueryServiceInstance(Container container, Type queryType, Type resultType, Type queryServiceImplType)
        {
            //logger.LogInformation($"Creating query instance: {queryServiceImplType.ToFriendlyName()}");
            const string SCHEMA_NAME = "Blog";

            var readQuery = CreateReadQueryFunction(container, queryType, resultType);
            var queryParameters = GetCreateQueryParametersFunc(queryType);
            var procedureName = queryType.Name.Replace("Query", "");
            var fullProcedureName = SCHEMA_NAME + "." + procedureName;

            //logger.LogInformation($"Created Read query: {readQuery.ToString()}");
            //logger.LogInformation($"Created Create Query Pameteres func: {queryParameters.ToString()}");

            var database = container.GetInstance<IDatabase>();

            return Activator.CreateInstance(queryServiceImplType, database, readQuery, queryParameters, fullProcedureName);
        }

        private static dynamic CreateReadQueryFunction(Container container, Type queryType, Type resultType)
        {
            //logger.LogInformation($"Creating readQueryFunction with result: ${resultType.ToFriendlyName()}");
            var readerArgument = Expression.Parameter(typeof(IDataReader), "reader");
            var queryArgument = Expression.Parameter(queryType, "query");
            var resultTarget = Expression.Label(resultType, "result");
            var resultVariable = Expression.Variable(resultType, "result");

            var resultItemType = IsPaged(resultType) ? GetItemResultType(resultType) : resultType;

            var readerItemType = IsEnumerable(resultItemType) ? resultType.GetGenericArguments().First() : resultItemType;

            var readerType = typeof(IReader<>).MakeGenericType(readerItemType);
            var readerInstance = container.GetInstance(readerType);
            var readerVar = Expression.Constant(readerInstance, readerType);

            var readMethod = readerType.GetMethod("Read");

            var readCall = Expression.Call(readerVar, readMethod, readerArgument);

            Expression result = readCall;

            if (IsPaged(resultType))
            {
                //logger.LogInformation($"Creating Paged result: {resultType.ToFriendlyName()}");
                var resultCtor = Expression.New(resultType);

                var itemsProperty = resultType.GetProperty("Items");
                var pagingProperty = resultType.GetProperty("Paging");

                var itemsAssignment = Expression.Bind(itemsProperty, readCall);

                var queryPagingProperty = queryType.GetProperty("Paging");
                var pagingAssignment = 
                    Expression.Bind(
                        pagingProperty,
                        Expression.MakeMemberAccess(queryArgument, queryPagingProperty)
                    );

                var resultInstance = Expression.MemberInit(resultCtor, itemsAssignment, pagingAssignment);

                result = resultInstance;
            }
            else if (!IsEnumerable(resultType))
            {
                var firstOrDefaultMethod = typeof(Enumerable).GetMethods(BindingFlags.Static | BindingFlags.Public)
                    .Where(mi =>
                        mi.Name == "FirstOrDefault"
                        && mi.GetParameters().Count() == 1)
                    .First()
                    .MakeGenericMethod(resultType);

                result = Expression.Call(firstOrDefaultMethod, result);
            }

            var funcType = typeof(Func<,,>).MakeGenericType(typeof(IDataReader), queryType, resultType);


            //var returnExpression = Expression.Return(resultTarget, resultVariable, resultType);
            //var returnLabel = Expression.Label(resultTarget, )

            return Expression.Lambda(funcType, result, readerArgument, queryArgument).Compile();
        }

        private static Func<dynamic, IDictionary<string, object>> GetCreateQueryParametersFunc(Type type)
        {
            return i => type.GetProperties(BindingFlags.Public | BindingFlags.Instance)
                .SelectMany<PropertyInfo, KeyValuePair<string, object>>(p => QueryMemberSelector(i, p))
                .ToDictionary(property => property.Key, property => property.Value);
        }

        private static IEnumerable<KeyValuePair<string, object>> QueryMemberSelector(dynamic instance, PropertyInfo propertyInfo)
        {
            if (propertyInfo.PropertyType.IsClass && propertyInfo.PropertyType.IsEquivalentTo(typeof(PageInfo)))
            {
                // split into standard page arguments for a query.
                PageInfo paging = propertyInfo.GetValue(instance);

                yield return CreateQueryParameter("PageNumber", paging.PageIndex);
                yield return CreateQueryParameter("PageSize", paging.PageSize);
            }
            else
            {
                yield return CreateQueryParameter(propertyInfo.Name, propertyInfo.GetValue(instance));
            }
        }

        private static KeyValuePair<string, object> CreateQueryParameter(string argumentName, object value) {
            if (value is bool boolValue)
            {
                value = boolValue ? 1 : 0;
            }
            return new KeyValuePair<string, object>($"@{argumentName}", value);
        }

        private static bool IsPaged(Type type) =>
            type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Paged<>);

        private static bool IsEnumerable(Type type) =>
             type.IsGenericType && type.GetGenericTypeDefinition() == typeof(IEnumerable<>);

        private static Type GetItemResultType(Type type) =>
            type.GetGenericArguments().First();
    }
}
