using DataAccess.CommandServices;
using DatabaseFactory.Data.Contracts;
using Domain.Data.Commands;
using EnsureThat;
using System;
using System.Collections.Generic;
using System.Data;

namespace DataAccess.DataAccess.CommandServices
{
    public class AutoGeneratedCommandService<TCommand> : DbCommandService<TCommand>
        where TCommand : ICommand
    {
        public Func<TCommand, IDictionary<string, object>> createParameters;

        public AutoGeneratedCommandService(
            IDatabase database,
            Func<TCommand, IDictionary<string, object>> createParameters,
            string procedureName) : base(database)
        {
            EnsureArg.IsNotNull(createParameters, nameof(createParameters));

            this.createParameters = createParameters;
            ProcedureName = procedureName;
        }

        protected override IEnumerable<IDataParameter> GetParameters(TCommand command)
        {
            foreach (var entry in createParameters(command))
            {
                yield return Database.CreateParameter(entry.Key, entry.Value);
            }
        }

        protected override string ProcedureName { get; }
    }
}
